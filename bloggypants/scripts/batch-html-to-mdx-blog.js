import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import { glob } from "glob";
import { JSDOM } from "jsdom";
import TurndownService from "turndown";

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è blog
const config = {
  sourceRoot: path.join(
    path.dirname(fileURLToPath(import.meta.url)),
    "..",
    "build",
    "blog",
    "blog"
  ),
  targetRoot: "/Users/svetaco/Documents/Astro-my/src/content/blog/dirty",
  categories: ["blog"],
  defaultCategory: "blog",
};

const turndownService = new TurndownService({
  headingStyle: "atx",
  codeBlockStyle: "fenced",
});

// --- helpers ---
const SITE_ORIGIN = "https://tetrate.io";

function isBadOg(url = "") {
  const u = url.toLowerCase();
  return (
    !u ||
    u.endsWith(".svg") ||
    u.includes("logo") ||
    u.includes("placeholder") ||
    u.includes("og_image") ||
    u.includes("tetrate.io-og_image")
  );
}

// –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ http/https –∏ –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º ¬´–ø–ª–æ—Ö–∏–µ¬ª
function isGoodUrl(url = "") {
  const s = url.toLowerCase().trim();
  if (!/^https?:\/\//.test(s)) return false;
  return !(
    s.endsWith(".svg") ||
    s.includes("logo") ||
    s.includes("placeholder") ||
    s.includes("og_image") ||
    s.includes("tetrate.io-og_image")
  );
}

// –ø—Ä–∏–≤–æ–¥–∏–º –∫ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É url, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ; –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ http/https
function absolutize(url = "") {
  if (!url) return "";
  try {
    const abs = new URL(url, SITE_ORIGIN).href;
    return /^https?:\/\//i.test(abs) ? abs : "";
  } catch {
    return "";
  }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
function isGoodImageUrl(url = "") {
  if (!url) return false;
  const s = url.toLowerCase().trim();

  // –ü—Ä–∏–Ω–∏–º–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
  if (s.startsWith("/wp-content/uploads/")) return true;
  if (s.startsWith("/wp-content/")) return true;

  // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ URL
  if (/^https?:\/\//.test(s)) {
    return !(
      s.endsWith(".svg") ||
      s.includes("logo") ||
      s.includes("placeholder") ||
      s.includes("og_image") ||
      s.includes("tetrate.io-og_image")
    );
  }

  return false;
}

// –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL (HEAD ‚Üí fallback GET)
async function urlOk(url = "") {
  if (!url) return false;
  try {
    let res = await fetch(url, { method: "HEAD" });
    if (!res.ok || res.status >= 400) {
      res = await fetch(url, { method: "GET" });
      return res.ok && res.status < 400;
    }
    return true;
  } catch {
    return false;
  }
}

// –∏–∑–≤–ª–µ–∫–∞–µ–º og:image –∏–∑ HTML
function extractOgImage(document) {
  const ogImage = document.querySelector('meta[property="og:image"]');
  if (!ogImage) return "";

  const content = ogImage.getAttribute("content");
  if (!content) return "";

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ö–æ—Ä–æ—à–∏–π URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  if (isGoodImageUrl(content)) {
    return content;
  }

  return "";
}

// –∏–∑–≤–ª–µ–∫–∞–µ–º title –∏–∑ HTML
function extractTitle(document) {
  const title = document.querySelector("title");
  if (!title) return "";

  return title.textContent.trim();
}

// –∏–∑–≤–ª–µ–∫–∞–µ–º description –∏–∑ HTML
function extractDescription(document) {
  const description = document.querySelector('meta[name="description"]');
  if (!description) return "";

  return description.getAttribute("content")?.trim() || "";
}

// –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ HTML
function extractDate(document) {
  const date = document.querySelector(
    'meta[property="article:published_time"]'
  );
  if (!date) return "";

  return date.getAttribute("content")?.trim() || "";
}

// –∏–∑–≤–ª–µ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –∏–∑ HTML
function extractAuthor(document) {
  const author = document.querySelector('meta[name="author"]');
  if (!author) return "";

  return author.getAttribute("content")?.trim() || "";
}

// –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ HTML
function extractContent(document) {
  const content = document.querySelector(".post__content");
  if (!content) return "";

  return content.innerHTML;
}

// —Å–æ–∑–¥–∞–µ–º slug –∏–∑ URL
function createSlug(url) {
  const urlObj = new URL(url);
  const pathname = urlObj.pathname;

  // –£–±–∏—Ä–∞–µ–º /blog/ –∏–∑ –Ω–∞—á–∞–ª–∞ –ø—É—Ç–∏
  const cleanPath = pathname.replace(/^\/blog\//, "");

  // –£–±–∏—Ä–∞–µ–º trailing slash
  const finalPath = cleanPath.replace(/\/$/, "");

  // –ó–∞–º–µ–Ω—è–µ–º / –Ω–∞ - –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è slug
  return finalPath.replace(/\//g, "-");
}

// –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
async function processFile(filePath) {
  console.log(`Processing: ${filePath}`);

  const content = fs.readFileSync(filePath, "utf8");
  const dom = new JSDOM(content);
  const document = dom.window.document;

  // –°–æ–∑–¥–∞–µ–º URL –∏–∑ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
  const relativePath = path.relative(config.sourceRoot, filePath);
  const url = `https://tetrate.io/blog/${relativePath.replace(
    /\/index\.html$/,
    ""
  )}`;
  const slug = createSlug(url);

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  const title = extractTitle(document);
  const description = extractDescription(document);
  const date = extractDate(document);
  const author = extractAuthor(document);
  const featuredImage = extractOgImage(document);
  const htmlContent = extractContent(document);

  if (!htmlContent) {
    console.log(`‚ö†Ô∏è  No content found in ${filePath}`);
    return;
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HTML –≤ Markdown
  const markdownContent = turndownService.turndown(htmlContent);

  // –°–æ–∑–¥–∞–µ–º frontmatter
  const frontmatter = {
    title: title || "",
    description: description || "",
    date: date || null,
    author: author || "Tetrate Team", // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Tetrate Team
    featuredImage: featuredImage || null,
    categories: config.categories,
    excerpt: description || "",
  };

  // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–ª—è
  Object.keys(frontmatter).forEach((key) => {
    if (
      frontmatter[key] === null ||
      frontmatter[key] === "" ||
      frontmatter[key] === ">"
    ) {
      delete frontmatter[key];
    }
  });

  // –°–æ–∑–¥–∞–µ–º MDX –∫–æ–Ω—Ç–µ–Ω—Ç
  const mdxContent = `---
${Object.entries(frontmatter)
  .map(([key, value]) => {
    if (typeof value === "string" && value.includes("\n")) {
      return `${key}: >-\n  ${value}`;
    }
    return `${key}: ${JSON.stringify(value)}`;
  })
  .join("\n")}
---

${markdownContent}`;

  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  const targetDir = path.join(config.targetRoot, slug);
  fs.mkdirSync(targetDir, { recursive: true });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
  const targetPath = path.join(targetDir, "index.mdx");
  fs.writeFileSync(targetPath, mdxContent);

  console.log(`‚úÖ Created: ${targetPath}`);
}

// –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log("üöÄ Starting blog HTML to MDX conversion...");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ source –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!fs.existsSync(config.sourceRoot)) {
    console.error(`‚ùå Source directory not found: ${config.sourceRoot}`);
    console.log("Please run 'npm run snarf' first to download content");
    process.exit(1);
  }

  // –°–æ–∑–¥–∞–µ–º target –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  fs.mkdirSync(config.targetRoot, { recursive: true });

  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ HTML —Ñ–∞–π–ª—ã
  const files = glob.sync(path.join(config.sourceRoot, "**/*.html"));

  if (files.length === 0) {
    console.log("No HTML files found to process");
    return;
  }

  console.log(`Found ${files.length} files to process`);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
  for (const file of files) {
    await processFile(file);
  }

  console.log("\nüéâ Blog HTML to MDX conversion completed!");
  console.log(`\nNext steps:`);
  console.log(`1. Review the generated files in: ${config.targetRoot}`);
  console.log(`2. Run: node src/content/clean-blog.mjs`);
  console.log(
    `3. The cleaned files will be saved to: ${config.targetRoot.replace(
      "/dirty",
      ""
    )}`
  );
}

main().catch(console.error);
