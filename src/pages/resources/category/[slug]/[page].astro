---
import { ClientRouter } from 'astro:transitions';
import { getCollection } from 'astro:content';
import Layout from '@/layouts/Layout.astro';
import Hero from '@/parts/resources/hero/Hero.astro';
import List from '@/parts/resources/list/List.astro';
import Cta from '@/parts/learn/cta/Cta.astro';
import { slugify } from '@/utils/slugify';

export const prerender = false;

const ITEMS_PER_PAGE = 9;
const { slug, page } = Astro.params;
const currentPage = parseInt(page);

const url = new URL(Astro.request.url);
const query = (url.searchParams.get("q") ?? "").trim().toLowerCase();

const resources = await getCollection("resources", ({ data }) =>
	import.meta.env.PROD ? data.draft !== true : true
);

const normalizeToArray = (field: unknown) => (Array.isArray(field) ? field : field ? [field] : []);

// создаю список всех категорий
const allCategories = [
	...new Set(resources.flatMap((resource) => 
		normalizeToArray(resource.data.categories).map((c: string) => c.trim())
	)),
];

// нахожу текущую категорию по slug
const category = allCategories.find(c => slugify(c) === slug.toLowerCase());
if (!category) {
	return new Response(null, { status: 404 });
}

const isSearching = query.length > 0;

// Сначала ищу статью с slug "teg-data-sheet" (как на главной странице)
const foundResource = resources.find(resource => resource.slug === "teg-data-sheet");
const featuredResource = foundResource ?? resources[0];

// Фильтрую остальные статьи по категории и поиску
const filtered: any[] = [];

for (const resource of resources) {
  // Пропускаю featured resource
  if (resource === featuredResource) continue;
  
  // проверяю категорию
  const articleCategories = normalizeToArray(resource.data.categories)
    .map((c: string) => c.trim().toLowerCase());
  
  // проверяю, соответствует ли статья выбранной категории
  const isInCategory = articleCategories.some(cat => 
    slugify(cat) === slug.toLowerCase()
  );
  if (!isInCategory) continue;

  // проверяю поиск
  if (isSearching) {
    const title = (resource.data.title ?? "").toLowerCase();
    const resourceSlug = resource.slug.toLowerCase();
    const catsString = articleCategories.join(" ").toLowerCase();
    
    const matchesQuery = title.includes(query) || resourceSlug.includes(query) || catsString.includes(query);
    if (!matchesQuery) continue;
  }

  filtered.push(resource);
}

// сортирую по дате
filtered.sort((a, b) => (b.data.date?.valueOf() || 0) - (a.data.date?.valueOf() || 0));

// пагинация
const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
const paginatedResources = filtered.slice(startIndex, startIndex + ITEMS_PER_PAGE);
const totalPages = Math.ceil(filtered.length / ITEMS_PER_PAGE);
---

<Layout
	title={`Resources in ${category}`} 
  description="Filtered resources" 
  headerClass="nav__with__bg"
>
	<Hero featuredResource={featuredResource} allCategories={allCategories} currentCategory={category} />
	<div data-articles-wrapper class="articles-wrapper">
		<List
			resources={paginatedResources}
			totalPages={totalPages}
			currentPage={currentPage}
			baseUrl={`/resources/category/${slug}`}
			query={query ? `q=${encodeURIComponent(query)}` : ""}
		/>
	</div>
	<Cta />

	<Fragment slot="head">
		<ClientRouter />
	</Fragment>
</Layout>