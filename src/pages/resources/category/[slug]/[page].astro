---
import { ClientRouter } from 'astro:transitions';
import { getCollection } from 'astro:content';
import Layout from '@/layouts/Layout.astro';
import Hero from '@/parts/resources/hero/Hero.astro';
import List from '@/parts/resources/list/List.astro';
import Cta from '@/parts/learn/cta/Cta.astro';
import { slugify } from '@/utils/slugify';

export const prerender = false;

const ITEMS_PER_PAGE = 9;

// Простая обработка параметров
const { slug, page } = Astro.params;
const currentPage = parseInt(page || "1");

// Простая обработка поиска
const url = new URL(Astro.request.url);
const query = (url.searchParams.get("q") ?? "").trim().toLowerCase();

// Получаем все ресурсы
let allResources;
try {
	allResources = await getCollection("resources", ({ data }) =>
		import.meta.env.PROD ? data.draft !== true : true
	);
} catch (error) {
	console.error('Error getting resources collection:', error);
	return new Response('Failed to load resources', { status: 500 });
}

// Простая нормализация
const normalizeToArray = (field: unknown) => {
	if (!field) return [];
	return Array.isArray(field) ? field : [field];
};

// Получаем все категории
const allCategories = [
	...new Set(allResources.flatMap((resource) => 
		normalizeToArray(resource.data.categories).map((c: string) => c.trim())
	)),
];

// Находим текущую категорию - упрощенная версия
const category = allCategories.find(c => 
	c.trim().toLowerCase().replace(/\s+/g, '-') === slug?.toLowerCase()
);

// Если категория не найдена, возвращаем 404
if (!category) {
	return new Response(null, { status: 404 });
}

// Featured resource
const featuredResource = allResources.find(resource => resource.slug === "teg-data-sheet") ?? allResources[0];

// Простая фильтрация
const filteredResources = allResources.filter((resource) => {
	// Пропускаем featured resource
	if (resource === featuredResource) return false;
	
	// Проверяем категорию - упрощенная версия
	const resourceCategories = normalizeToArray(resource.data.categories)
		.map((c: string) => c.trim().toLowerCase().replace(/\s+/g, '-'));
	
	const isInCategory = resourceCategories.includes(slug.toLowerCase());
	if (!isInCategory) return false;
	
	// Проверяем поиск
	if (query) {
		const title = (resource.data.title ?? "").toLowerCase();
		const resourceSlug = resource.slug.toLowerCase();
		return title.includes(query) || resourceSlug.includes(query);
	}
	
	return true;
});

// Сортировка по дате
filteredResources.sort((a, b) => (b.data.date?.valueOf() || 0) - (a.data.date?.valueOf() || 0));

// Пагинация
const totalPages = Math.ceil(filteredResources.length / ITEMS_PER_PAGE);
const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
const paginatedResources = filteredResources.slice(startIndex, startIndex + ITEMS_PER_PAGE);
---

<Layout
	title={`Resources in ${category}`} 
  description="Filtered resources" 
  headerClass="nav__with__bg"
>
	<Hero featuredResource={featuredResource} allCategories={allCategories} currentCategory={category} />
	<div data-articles-wrapper class="articles-wrapper">
		<List
			resources={paginatedResources}
			totalPages={totalPages}
			currentPage={currentPage}
			baseUrl={`/resources/category/${slug}`}
		/>
	</div>
	<Cta />

	<Fragment slot="head">
		<ClientRouter />
	</Fragment>
</Layout>