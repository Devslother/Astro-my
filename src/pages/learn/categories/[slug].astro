export const prerender = false;

import { getCollection, type CollectionEntry } from 'astro:content';
import { slugify } from '../../../utils/slugify';
import { ClientRouter } from 'astro:transitions';
import Layout from '../../../layouts/Layout.astro';
import Hero from '../../../parts/learn/hero/Hero.astro';
import List from '../../../parts/learn/list/List.astro';
import Cta from '../../../parts/home/cta/Cta.astro';

const ITEMS_PER_PAGE = 9;
const currentPage = 1;

const normalizeToArray = (field: unknown) => {
	if (!field) return [];
	return Array.isArray(field) ? field : [field];
};

export async function getStaticPaths() {
	const articles: CollectionEntry<"learn">[] = await getCollection("learn", ({ data }) => {
		return import.meta.env.PROD ? data.draft !== true : true;
	});

	const categories = [
		...new Set(articles.flatMap((article) =>
			normalizeToArray(article.data.categories).flatMap(cat => cat.split(',').map((c: string) => c.trim()))
		)),
	];

	return categories.map((category) => ({
		params: { slug: slugify(category).toLowerCase() },
	}));
}

const allArticles: CollectionEntry<"learn">[] = await getCollection("learn");

const allCategories = [
	...new Set(allArticles.flatMap((article) =>
		normalizeToArray(article.data.categories)
	)),
];

const { slug } = Astro.params;
const category = allCategories.find(c => slugify(c) === slug.toLowerCase());

if (!category) throw new Error(`No category found for slug: ${slug}`);

const url = new URL(Astro.request.url);
const query = (url.searchParams.get("q") ?? "").trim().toLowerCase();

const isSearching = query.length > 0;

const filteredArticles = allArticles
	.filter((article) => {
		const categoriesArray = normalizeToArray(article.data.categories)
			.flatMap(cat => cat.split(',').map((c: string) => c.trim().toLowerCase()));
		const inCategory = categoriesArray.includes(category.toLowerCase());
		if (!inCategory) return false;

		if (!isSearching) return true;

		const title = (article.data.title ?? "").toLowerCase();
		const slug = article.slug.toLowerCase();
		const cats = categoriesArray.join(",");
		return title.includes(query) || slug.includes(query) || cats.includes(query);
	})
	.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
const endIndex = startIndex + ITEMS_PER_PAGE;
const paginatedArticles = filteredArticles.slice(startIndex, endIndex);
const totalPages = Math.ceil(filteredArticles.length / ITEMS_PER_PAGE);

const noQuery = !isSearching;
const hasResults = filteredArticles.length > 0;