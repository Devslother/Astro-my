---
export const prerender = false;

import Layout from '@/layouts/Layout.astro';
import Cta from '@/parts/learn/cta/Cta.astro';
import Hero from '@/parts/learn/hero/Hero.astro';
import List from '@/parts/learn/list/List.astro';
import { slugify } from '@/utils/slugify';
import { getCollection, type CollectionEntry } from 'astro:content';
import { ClientRouter } from 'astro:transitions';

const ITEMS_PER_PAGE = 9;

const normalizeToArray = (field: unknown): string[] => {
	if (!field) return [];
	const value = Array.isArray(field) ? field.join(',') : field.toString();
	return value.split(',').map(c => c.trim()).filter(Boolean);
};

export async function getStaticPaths() {
	const articles: CollectionEntry<"learn">[] = await getCollection("learn");

	const categories = [...new Set(articles.flatMap((article) => normalizeToArray(article.data.categories)))];

	const paths = [];

	for (const category of categories) {
		const categorySlug = slugify(category);
		const articlesInCategory = articles.filter((article) => {
			const articleCategories = normalizeToArray(article.data.categories);
			return articleCategories.includes(category);
		});

		const totalPages = Math.ceil(articlesInCategory.length / ITEMS_PER_PAGE);

		for (let i = 2; i <= totalPages; i++) {
			paths.push({
				params: { slug: categorySlug, page: i.toString() },
			});
		}
	}

	return paths;
}

const { slug, page } = Astro.params;
const currentPage = parseInt(page as string);

if (currentPage === 1) {
	return Astro.redirect(`/learn/categories/${slug}`, 301);
}

const url = new URL(Astro.request.url);
const query = (url.searchParams.get("q") ?? "").trim().toLowerCase();
const isSearching = query.length > 0;

const allArticles: CollectionEntry<"learn">[] = await getCollection("learn");

const allCategories = [...new Set(allArticles.flatMap((article) => normalizeToArray(article.data.categories)))];

const currentCategory = allCategories.find(
	c => slugify(c) === slug?.toLowerCase()
);

if (!currentCategory) {
	return new Response(null, { status: 404, statusText: 'Not Found' });
}

const filteredArticles = allArticles
.filter((article) => {
		const articleCategories = normalizeToArray(article.data.categories).map(c => c.toLowerCase());
		const isInCategory = articleCategories.includes(currentCategory.toLowerCase());
		if (!isInCategory) return false;

		if (!isSearching) return true;

		const title = (article.data.title ?? "").toLowerCase();
		const slug = article.slug.toLowerCase();
		const cats = articleCategories.join(",");
		return title.includes(query) || slug.includes(query) || cats.includes(query);
	})
  .sort((a, b) => new Date(b.data.date).valueOf() - new Date(a.data.date).valueOf());

const totalPages = Math.ceil(filteredArticles.length / ITEMS_PER_PAGE);

if (currentPage > totalPages) {
	return new Response(null, { status: 404, statusText: 'Not Found' });
}

const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
const paginatedArticles = filteredArticles.slice(startIndex, startIndex + ITEMS_PER_PAGE);
const noQuery = !isSearching;
const hasResults = filteredArticles.length > 0;
---

<Layout
	title={`Learning Center | ${currentCategory} | Page ${currentPage}`}
	description={`Page ${currentPage} of articles in the ${currentCategory} category.`}
	headerClass="nav__with__bg"
>
	<Hero />
	<div data-articles-wrapper class="articles-wrapper">
		<List
			articles={paginatedArticles}
			totalPages={totalPages}
			currentPage={currentPage}
			allCategories={allCategories}
			currentCategory={currentCategory}
			baseUrl={`/learn/categories/${slug}`}
			noQuery={noQuery}
			hasResults={hasResults}
		/>
	</div>
	<Cta />

	<Fragment slot="head">
		<ClientRouter />
	</Fragment>
</Layout>