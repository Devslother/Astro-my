---
import Icon from '@/components/icon/Icon.astro';
import styles from './CategoriesFilter.module.css'
import clsx from 'clsx';
import { slugify } from '@/utils/slugify';


interface Props {
	categories: string[];
	currentCategory?: string;
}

const { currentCategory, categories } = Astro.props;

const uniqueCategories = [...new Set(
  categories.flatMap(cat => cat.split(',').map(c => c.trim()))
)].sort((a, b) => a.localeCompare(b));

const categoryMap = Object.fromEntries(
  uniqueCategories.map(cat => [slugify(cat), cat])
);

const slugToLabel = Object.fromEntries(uniqueCategories.map((cat) => [slugify(cat), cat]));
const selectedLabel = currentCategory ? (slugToLabel[currentCategory] ?? currentCategory) : "Select category";
---

<div class={styles.filter}>
  <div class={styles.select}>
     <button 
      type="button" 
      id="category-button" 
      aria-haspopup="listbox" 
      aria-expanded="false"
      class={styles.select__btn}
     >
      <span class={clsx(
        'text__body--16',
        styles.label,
        { [styles.selected]: currentCategory }
      )}>
        {selectedLabel}
      </span>
      <Icon name="arrow" 
        width={24} 
        height={24} 
        color="var(--color-gray-800)"
        class={styles.arrow}
       />
    </button>

    <div 
      class={styles.dropdown} 
      id="category-dropdown" 
      hidden 
      role="listbox"
    >
      {uniqueCategories.map((category: string) => (
        <a 
          role="option"
          class={styles.option}
          href={`/learn/categories/${slugify(category)}`}
          aria-selected={category === currentCategory}
          data-value={slugify(category)}
          data-option
        >
          {category}
        </a>
      ))}
    </div>
  </div>

  <button 
    id="clear-filters" 
    type="button"
    style="display: none;"
    class={clsx(
      'text__body--16',
      styles.reset
    )}
  >
    Clear
    <Icon 
      name="close" 
      width={20} 
      height={20} 
      color="var(--color-gray-700)"
     />
  </button>
</div>

<script is:inline type="application/json" id="category-map" set:html={JSON.stringify(categoryMap)} />

<script is:inline>
(() => {
  // ОДИНАКОВЫЙ контейнер на всех страницах!
  const WRAP_SEL = "[data-articles-wrapper]";

  let currentCategory = "";

  let lastNonSearchUrl =
  location.pathname.startsWith("/learn/search")
    ? "/learn"
    : location.pathname + location.search;

  // slug -> label из скрытого JSON
  function readCategoryMap() {
    const el = document.getElementById("category-map");
    try { return el ? JSON.parse(el.textContent || "{}") : {}; } catch { return {}; }
  }

  function setButtonLabelFromSlug(slug) {
    const map  = readCategoryMap();
    const span = document.querySelector("#category-button span");
    if (!span) return;
    span.textContent = slug ? (map[slug] || "Select category") : "Select category";
  }

  function toggleClear() {
    const clearBtn = document.getElementById("clear-filters");
    const span = document.querySelector("#category-button span");
    if (!clearBtn || !span) return;
    const hasCategory = span.textContent.trim() !== "Select category";
    clearBtn.style.display = hasCategory ? "inline-flex" : "none";
  }

  function extractSlugFromUrl(url) {
    const path = new URL(url, location.origin).pathname;
    const m = path.match(/^\/learn\/categories\/([^/]+)/);
    return m ? decodeURIComponent(m[1]) : "";
  }

  function replaceArticlesFromHtml(html) {
    const doc = new DOMParser().parseFromString(html, "text/html");
    const newWrap = doc.querySelector(WRAP_SEL);
    const curWrap = document.querySelector(WRAP_SEL);
    if (!newWrap || !curWrap) return false;
    curWrap.innerHTML = newWrap.innerHTML;
    return true;
  }

  function clearSearchInputs() {
    ["search-input-mobile", "search-input-desktop"].forEach((id) => {
      const el = document.getElementById(id);
      if (el) {
        el.value = "";
        // чтобы поисковый скрипт сам погасил /learn/search/… и не перебил категорию
        el.dispatchEvent(new Event("input", { bubbles: true }));
      }
    });
  }

  function updateContent(url) {
    const scrollY = window.scrollY;
    fetch(url)
      .then(res => res.text())
      .then(html => {
        if (!replaceArticlesFromHtml(html)) return;

        history.pushState({}, "", url);
        lastNonSearchUrl = url;
        if (window.__setLastNonSearchUrl) {
          window.__setLastNonSearchUrl(url);
        }

        currentCategory = extractSlugFromUrl(url);
        setButtonLabelFromSlug(currentCategory);
        toggleClear();

        // СБРОС ПОИСКА — критично, иначе скрипт поиска тут же запишет /learn/search/?q=…
        clearSearchInputs();

        // дать шанс другим скриптам перевеситься
        document.dispatchEvent(new Event("astro:page-load"));

        window.scrollTo({ top: scrollY, behavior: "instant" });
      });
  }

  function bindDropdown() {
    const btn = document.getElementById("category-button");
    const dd  = document.getElementById("category-dropdown");
    if (!btn || !dd || btn.dataset.bound === "1") return;
    btn.dataset.bound = "1";

    btn.addEventListener("click", (e) => {
      e.stopPropagation();
      const open = btn.getAttribute("aria-expanded") === "true";
      btn.setAttribute("aria-expanded", String(!open));
      dd.hidden = open;
    });

    dd.addEventListener("click", (e) => {
      const a = e.target && e.target.closest ? e.target.closest("[data-option]") : null;
      if (!a) return;
      e.preventDefault();
      const slug = a.getAttribute("data-value") || "";
      const url  = slug ? `/learn/categories/${slug}` : "/learn";
      btn.setAttribute("aria-expanded", "false");
      dd.hidden = true;
      updateContent(url);
    });

    document.addEventListener("click", (e) => {
      const t = e.target;
      if (!btn.contains(t) && !dd.contains(t)) {
        btn.setAttribute("aria-expanded", "false");
        dd.hidden = true;
      }
    });

    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && !dd.hidden) {
        btn.setAttribute("aria-expanded", "false");
        dd.hidden = true;
      }
    });
  }

  function bindClear() {
    const clearBtn = document.getElementById("clear-filters");
    if (!clearBtn || clearBtn.dataset.bound === "1") return;
    clearBtn.dataset.bound = "1";
    clearBtn.addEventListener("click", () => {
      currentCategory = "";
      setButtonLabelFromSlug("");
      toggleClear();
      updateContent("/learn");
    });
  }

  function initFromUrl() {
    currentCategory = extractSlugFromUrl(location.href);
    setButtonLabelFromSlug(currentCategory);
    toggleClear();
  }

  // как в CategoriesList: подмена по popstate
  function bindPopstate() {
    window.addEventListener("popstate", () => {
      const url = location.href;
      fetch(url)
        .then(r => r.text())
        .then(html => {
          if (!replaceArticlesFromHtml(html)) return;
          currentCategory = extractSlugFromUrl(url);
          setButtonLabelFromSlug(currentCategory);
          toggleClear();
          document.dispatchEvent(new Event("astro:page-load"));
        });
    });
  }

  function run() {
    initFromUrl();
    bindDropdown();
    bindClear();
    bindPopstate();
  }

  document.addEventListener("DOMContentLoaded", run);
  document.addEventListener("astro:page-load", run);
})();
</script>