---
import BackButton from '@/components/Button/BackButton.astro';
import Grid from '@/components/Grid/Grid.astro';
import Pattern from '@/components/pattern/Pattern.astro';
import styles from './Article.module.css';
import clsx from "clsx";
import TableOfContents from './toc/TableOfContents.astro';
import ShareButton from "../../../components/Button/ShareButton.astro"
import Figure from '@/components/content/figure/Figure.astro';
import Quote from '@/components/content/quote/Quote.astro';
import Admonition from '@/components/content/admonition/Admonition.astro';
import InlinePromo from '@/components/content/inlinepromo/InlinePromo.astro';
import Icon from '@/components/icon/Icon.astro';
import Code from '@/components/content/code/Code.astro';
import Related from './related/Related.astro';
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import Cta from '@/parts/home/cta/Cta.astro';
import Link from '@/components/Link/Link.astro';

const allArticles = await getCollection("learn");
const { article, headings } = Astro.props;
const currentSlug = article.slug;
const { Content } = await article.render();
const { title, description, featuredImage, date, author, authorImage } = article.data
const decodedTitle = decodeURIComponent(title);

const categoriesRaw = article.data.categories;
const categories = Array.isArray(categoriesRaw)
  ? categoriesRaw
  : typeof categoriesRaw === "string"
    ? categoriesRaw.split(",").map((cat) => cat.trim()).filter(Boolean)
    : [];

function getRelatedArticles(
  allArticles: CollectionEntry<"learn">[],
  currentSlug: string,
  categories: string[]
) {
  // Убираем текущую статью
  const others = allArticles.filter((a) => a.slug !== currentSlug);

  // Находим статьи с пересекающимися категориями
  const sameCategory = others.filter((a) => {
    const cats = Array.isArray(a.data.categories)
      ? a.data.categories
      : [a.data.categories];
    return cats.some((c) => categories.includes(c));
  });

  // Добавляем статьи до 3 шт., сначала из той же категории, потом любые другие
  return [...sameCategory, ...others.filter(a => !sameCategory.includes(a))]
    .slice(0, 3);
}

const related = getRelatedArticles(allArticles, currentSlug, categories);
---
<article class={styles.article}>
<Grid>
  <div class={styles.container}>
    <!-- Левая колонка: Back + TOC (Desktop) -->
    <div class={styles.tocDesktop}>
      <div class={styles.btn}>
        <BackButton fallback="/learn" />
      </div>
      <TableOfContents headings={headings} />
    </div>

    <!-- Центральная колонка: Контент -->
    <div class={styles.post}>
      <!-- Back кнопка (Mobile/Tablet) -->
      <div class={styles.btn}>
        <BackButton fallback="/learn" />
      </div>

      <div class={styles.header}>
        <h1 class={clsx(
          'text__heading--h4',
          'text__heading--h2-lg',
          'text__heading--h3-md',
          styles.title
        )}>
          {decodedTitle}
        </h1>

        {description && (
          <p class={styles.excerpt}>
            {description}
          </p>
        )}

        <div class={styles.meta}>
          <div class={styles.authorBlock}>
            {authorImage && (
              <img src={authorImage} alt={author} class={styles.authorAvatar} />
            )}
            {author && 
              <div class={clsx(
                'text__body--14-medium',
                'text__body--14-medium-lg',
                'text__body--14-medium-md',
                styles.authorName
              )}>
                {author}
              </div>
            }
            {date && 
                <div class={clsx(
                'text__body--14',
                'text__body--14-lg',
                'text__body--14-md',
                styles.date
              )}>
              {new Date(date).toLocaleDateString("en-US", {
                year: "numeric",
                month: "long",
                day: "numeric"
              })}
              </div>
            }
          </div>
        </div>

        <div class={styles.share}>
          <ShareButton
            shareUrl={Astro.url.href}
            title={title}
          />
        </div>
        
        {featuredImage && (
          <div class={styles.featuredImage}>
            <Figure 
              source={featuredImage} 
              width={"100%"} 
              lightbox={false} 
              alt="Featured Image"
             />
          </div>
        )}
      </div>

      <!-- TOC (Mobile/Tablet) -->
      <TableOfContents 
        className={styles.tocMobile} 
        headings={headings}
       />

      <div class={styles.content}>
        <Content
          components={{
            Quote,
            Admonition,
            Code,
            Icon,
            Figure,
            InlinePromo,
            img: Figure,
            a: Link,
          }}
        />
      </div>
    </div>
  </div>
</Grid>

{related.length > 0 && (
	<>
		<Pattern />
		<Related related={related} />
	</>
)}

<Cta />
</article>