---
import { slugify } from '@/utils/slugify';
import styles from './CategoriesList.module.css'
import clsx from 'clsx';


interface Props {
	categories: string[];
	currentCategory?: string;
}

const { currentCategory, categories } = Astro.props;

const uniqueCategories = [...new Set(
  categories.flatMap(cat => cat.split(',').map(c => c.trim()))
)].sort((a, b) => a.localeCompare(b));
---

<div class={styles.filter}>
  <ul class={styles.list} data-list>
    <li class={clsx(
        'text__body--14-md',
        styles.item,
        { [styles.active]: !currentCategory }
      )}
      data-item
    >
      <a href="/learn">All articles</a>
    </li>
    {uniqueCategories.map((category: string) => (
      <li class={clsx(
        'text__body--14-md',
        styles.item,
        { [styles.active]: currentCategory === slugify(category) } 
      )}
      data-item
    >
        <a href={`/learn/category/${slugify(category)}`}>
          {category}
        </a>
      </li>
    ))}
  </ul>
</div>

<script>
  function initializeDesktopCategories() {
    const container = document.querySelector('[data-list]');
    const categoryLinks = container.querySelectorAll('[data-item] a');

		(categoryLinks as NodeListOf<HTMLElement>).forEach(link => {
      if (link.dataset.listenerAdded) {
				return;
			}
			link.dataset.listenerAdded = 'true';

      link.addEventListener('click', e => {
        e.preventDefault();
				const url = link.getAttribute('href');
				const scrollY = window.scrollY;

        fetch(url)
        .then(res => res.text())
        .then(html => {
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');
          const newWrapper = doc.querySelector('[data-articles-wrapper]');
          const currentWrapper = document.querySelector('[data-articles-wrapper]');

          if (newWrapper && currentWrapper) {
            currentWrapper.replaceWith(newWrapper);
            history.pushState({}, '', url);
            window.scrollTo({ top: scrollY, behavior: 'instant' });

            const inputMobile = document.getElementById("search-input-mobile") as HTMLInputElement | null;
            const inputDesktop = document.getElementById("search-input-desktop") as HTMLInputElement | null;
            if (inputMobile) {
              inputMobile.value = '';
              inputMobile.dispatchEvent(new Event('input'));
            }
            if (inputDesktop) {
              inputDesktop.value = '';
              inputDesktop.dispatchEvent(new Event('input'));
            }

            document.dispatchEvent(new Event('astro:page-load'));
          }
        })  
      })
    })
  }

  document.addEventListener('DOMContentLoaded', initializeDesktopCategories);
	document.addEventListener('astro:page-load', initializeDesktopCategories);

</script>