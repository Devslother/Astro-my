import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const sourceDir = path.join(__dirname, "resources", "dirty");
const targetDir = path.join(__dirname, "resources");

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ frontmatter
function cleanFrontmatter(content) {
  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
  let cleaned = content.replace(/\n\s*\n/g, "\n\n");

  // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
  cleaned = cleaned.trim();

  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫
  cleaned = cleaned
    .split("\n")
    .map((line) => line.trimStart())
    .join("\n");

  return cleaned;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
function processFile(filePath) {
  try {
    const content = fs.readFileSync(filePath, "utf8");
    const cleanedContent = cleanFrontmatter(content);

    // –°–æ–∑–¥–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç sourceDir
    const relativePath = path.relative(sourceDir, filePath);
    const targetPath = path.join(targetDir, relativePath);

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const targetDirPath = path.dirname(targetPath);
    fs.mkdirSync(targetDirPath, { recursive: true });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.writeFileSync(targetPath, cleanedContent);

    console.log(`‚úÖ Processed: ${relativePath}`);
    return true;
  } catch (error) {
    console.error(`‚ùå Error processing ${filePath}:`, error.message);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log("üöÄ Starting resources files cleanup...");

  if (!fs.existsSync(sourceDir)) {
    console.error(`‚ùå Source directory not found: ${sourceDir}`);
    return;
  }

  // –°–æ–∑–¥–∞–µ–º target –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  fs.mkdirSync(targetDir, { recursive: true });

  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ .mdx —Ñ–∞–π–ª—ã
  const files = [];

  function findFiles(dir) {
    const items = fs.readdirSync(dir);
    for (const item of items) {
      const fullPath = path.join(dir, item);
      const stat = fs.statSync(fullPath);
      if (stat.isDirectory()) {
        findFiles(fullPath);
      } else if (item.endsWith(".mdx")) {
        files.push(fullPath);
      }
    }
  }

  findFiles(sourceDir);

  if (files.length === 0) {
    console.log("No .mdx files found to process");
    return;
  }

  console.log(`Found ${files.length} files to process`);

  let successCount = 0;
  let totalCount = files.length;

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
  for (const file of files) {
    if (processFile(file)) {
      successCount++;
    }
  }

  console.log(`\nüéâ Cleanup completed!`);
  console.log(`‚úÖ Successfully processed: ${successCount}/${totalCount} files`);
  console.log(`üìÅ Clean files saved to: ${targetDir}`);
}

main();
