---
import styles from './Figure.module.css';
import Icon from '@/components/icon/Icon.astro';
import { Image } from 'astro:assets';

interface Props {
  source: any;               // string | ImageMetadata
  alt?: string;
  caption?: string;
  width?: number | string;
  height?: number | string;
  index?: number;
  lightbox?: boolean;
}

const {
  source,
  caption,
  index,
  width,
  height,
} = Astro.props;

const alt = Astro.props.alt ?? 'Image';
const lightbox = Astro.props.lightbox !== false;

let imageAsset = source;


const isAstroAsset = imageAsset && imageAsset.src && imageAsset.format;
const isAstroImage = isAstroAsset && imageAsset.format !== "svg";
const isAstroSVG = isAstroAsset && imageAsset.format === "svg";
const isRemoteSVG = typeof source === "string" && source.match(/\.svg(\?.*)?$/i);
const isSVG = isAstroSVG || isRemoteSVG;


function normalizeSrc(s) {
  return (typeof s === "string" && s.startsWith("/wp-content"))
    ? `https://tetrate.io${s}`
    : s;
}

const displaySrc = isAstroAsset ? imageAsset.src : normalizeSrc(source);

const intrinsicWidth = isAstroAsset ? imageAsset.width : 800;
const intrinsicHeight = isAstroAsset ? imageAsset.height : 600;
---

{/** Ничего не рендерим, если источника нет */}
{displaySrc && (
  <figure class={styles.figure} data-figure-index={index}>
    <div
      class={`${styles.imageWrapper} ${!lightbox ? styles.noLightbox : ''}`}
      data-lightbox-trigger={lightbox ? true : undefined}
    >
      {isAstroAsset && !isSVG ? (
        <Image
          src={source}
          alt={alt}
          width={intrinsicWidth}
          height={intrinsicHeight}
          class={styles.image}
          quality={90}
          densities={[1, 2]}
          loading="lazy"
        />
      ) : (
        <img
          src={displaySrc}
          alt={alt}
          class={`${styles.image} ${isSVG ? styles.imageSvg : ''}`}
          loading="lazy"
          {...(!isSVG ? { width: intrinsicWidth, height: intrinsicHeight } : {})}
          style={isSVG ? 'width:100%;height:auto;max-width:100%;' : undefined}
          draggable="false"
        />
      )}
    </div>

    {caption && (
      <figcaption class={styles.caption}>
        {typeof index === 'number' ? <span class={styles.index}>Figure {index}: </span> : null}
        {caption}
      </figcaption>
    )}

    {/** Лайтбокс только если включён и есть src */}
    {lightbox && (
      <div class={styles.lightbox} data-lightbox>
        <div class={styles.backdrop} data-lightbox-close></div>

        {isAstroAsset && !isSVG ? (
          <Image
            src={source}
            alt={alt}
            width={intrinsicWidth}
            height={intrinsicHeight}
            class={styles.lightboxImage}
            quality={100}
            densities={[1, 2]}
          />
        ) : (
          <img
            src={displaySrc}
            alt={alt}
            class={`${styles.lightboxImage} ${isSVG ? styles.imageSvg : ''}`}
            style={isSVG ? 'max-width:95vw;max-height:90vh;width:auto;height:auto;' : undefined}
            {...(!isSVG ? { width: intrinsicWidth, height: intrinsicHeight } : {})}
            draggable="false"
          />
        )}

        <button class={styles.close} data-lightbox-close aria-label="Close lightbox">
          <Icon name="close" width={24} height={24} color="currentColor" />
        </button>
      </div>
    )}
  </figure>
)}

<script is:inline type="module">
  // Общий делегированный лайтбокс
  document.addEventListener("click", (e) => {
    const trigger = e.target.closest?.("[data-lightbox-trigger]");
    const close = e.target.closest?.("[data-lightbox-close]");

    if (trigger) {
      e.preventDefault();
      const figure = trigger.closest("figure");
      const lightbox = figure?.querySelector("[data-lightbox]");
      if (lightbox) {
        lightbox.classList.remove("lightbox--closing");
        lightbox.classList.add("active");
        document.body.style.overflow = "hidden";
      }
    }

    if (close) {
      e.preventDefault();
      const lightbox = e.target.closest?.("[data-lightbox]");
      if (lightbox) {
        lightbox.classList.add("lightbox--closing");
        lightbox.classList.remove("active");
        document.body.style.overflow = "";
        setTimeout(() => {
          lightbox.classList.remove("lightbox--closing");
        }, 300);
      }
    }
  });

  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      const activeLightbox = document.querySelector(".lightbox.active");
      if (activeLightbox) {
        activeLightbox.classList.add("lightbox--closing");
        activeLightbox.classList.remove("active");
        document.body.style.overflow = "";
        setTimeout(() => {
          activeLightbox.classList.remove("lightbox--closing");
        }, 300);
      }
    }
  });
</script>